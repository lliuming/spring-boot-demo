#Spring Boot 为您提供所有事物的默认值。例如，默认数据库是H2. 因此，当您想要使用任何其他数据库时，您必须在application.properties文件中定义连接属性。
#spring.jpa.hibernate.ddl-auto可以是none、update、create、 或create-drop。有关详细信息，请参阅Hibernate 文档。
#none: 默认为MySQL. 没有对数据库结构进行任何更改。

#update: Hibernate 根据给定的实体结构更改数据库。

#create: 每次都创建数据库，但在关闭时不删除它。

#create-drop: 创建数据库并在SessionFactory关闭时删除它。
#您必须以create或开头update，因为您还没有数据库结构。第一次运行后，您可以根据程序要求将其切换为update或none。update当您想对数据库结构进行一些更改时使用。
#H2和其他嵌入式数据库的默认值是create-drop. 对于其他数据库，例如MySQL，默认为none。
#这是一个很好的安全做法，以后你的数据库处于生产状态，将其设置为none，撤销从连接到Spring应用程序的MySQL用户所有特权，并给MySQL用户只SELECT，UPDATE，INSERT，和DELETE。
#当您在生产环境中时，您可能会受到 SQL 注入攻击。黑客可能会注入DROP TABLE或任何其他破坏性的 SQL 命令。因此，作为安全实践，您应该在向用户公开应用程序之前对数据库进行一些更改。
#
#以下命令撤销与 Spring 应用程序关联的用户的所有权限：
#
#mysql> revoke all on db_example.* from 'springuser'@'%';
#现在 Spring 应用程序无法在数据库中执行任何操作。
#
#应用程序必须具有一些权限，因此使用以下命令授予应用程序所需的最低权限：
#
#mysql> grant select, insert, delete, update on db_example.* to 'springuser'@'%';
#删除所有权限并授予一些权限为您的 Spring 应用程序提供了仅更改数据库数据而不是结构（架构）所需的权限。
#
#当您想对数据库进行更改时：
#
#重新授予权限。
#
#将 更改spring.jpa.hibernate.ddl-auto为update。
#
#重新运行您的应用程序。
spring.jpa.hibernate.ddl-auto=update
#spring.datasource.url=jdbc:mysql://${MYSQL_HOST:localhost}:3306/db_example
spring.datasource.url=jdbc:mysql://localhost:3306/test
spring.datasource.username=root
spring.datasource.password=123456
spring.datasource.driver-class-name =com.mysql.cj.jdbc.Driver
#spring.jpa.show-sql: true
